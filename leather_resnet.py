# -*- coding: utf-8 -*-
"""Leather_RESNET.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19sGQZPRr4fpDySS3jTUpU8a6IHWxjpsQ
"""

Simport tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)
test_datagen = ImageDataGenerator(rescale=1./255)

from google.colab import drive
drive.mount('/content/drive')

train='/content/drive/MyDrive/Intern/Leather Defect Classification/Train'

test='/content/drive/MyDrive/Intern/Leather Defect Classification/test'

valid='/content/drive/MyDrive/Intern/Leather Defect Classification/test'

train_generator = train_datagen.flow_from_directory(
    train,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training' )

test_generator = train_datagen.flow_from_directory(
    test,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training' )

valid_generator = train_datagen.flow_from_directory(
    valid,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training' )

def create_resnet_model(input_shape, num_classes):
    base_model = tf.keras.applications.ResNet50(input_shape=input_shape, include_top=False, weights='imagenet')
    base_model.trainable = False

    model = models.Sequential([
        base_model,
        layers.GlobalAveragePooling2D(),
        layers.Dense(num_classes, activation='softmax')
    ])
    return model

input_shape = (224, 224, 3)
num_classes = 6

resnet_model = create_resnet_model(input_shape, num_classes)

resnet_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history_resnet = resnet_model.fit(train_generator, epochs=30, validation_data=valid_generator)

class_names = list(valid_generator.class_indices.keys())
print("Class Names:", class_names)

plt.plot(history_resnet.history['accuracy'], label='ResNet Training Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Model Comparison - Training Accuracy')
plt.legend()
plt.show()

"""#RESNET MODEL"""

batch_x,batch_y=next(test_generator)
# Convert the list of images into a numpy array
test_images = np.array(batch_x)

# Now you can use these images for prediction
predictions = resnet_model.predict(test_images)

# Get the class names from the generator
class_names = list(test_generator.class_indices.keys())

# Print the predictions for the first 5 images
plt.figure(figsize=(15,15))
for i in range(9):
  k=class_names[np.argmax(predictions[i])]
  #print(f"Image {i+1}: {k}")
  plt.subplot(3,3,i+1)
  image = batch_x[i]
  actual_label=batch_y[i]
  actual_label=list(actual_label).index(max(actual_label))
  label_index = predictions[i].argmax()
  predicted_class = k
  plt.imshow(image)
 # plt.title(class_names[actual_label])
  plt.title(f"Predicted Class: {predicted_class} \n Actual Class: {class_names[actual_label]}")
plt.show()

